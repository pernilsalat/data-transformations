{"version":3,"file":"composeAsync.js","sources":["../src/composeAsync.js"],"sourcesContent":["import { is } from '#utils/is.js';\n\n/**\n * Performs right-to-left function composition. The rightmost function may have\n * any arity; the remaining functions must be unary. If any function returns a\n * promise, it chains remaining ones\n *\n * @func\n * @async\n * @category Function\n * @param {...Function} functions\n * @return {Function} a function that represents the composition of the arguments\n * @see pipeAsync\n * @example\n * var head = ([h]) => h;\n * var process = (a) => Promise.resolve(a);\n * var promiseAll = Promise.all.bind(Promise);\n *\n * var f = composeAsync(head, promiseAll, process);\n *\n * await f([1, 2]); // Promise.all([process(1), process(2)])[0] => 1\n *\n * @preserve true\n */\nexport function composeAsync(...functions) {\n  if (arguments.length === 0) {\n    throw new Error('composeAsync requires at least one argument');\n  }\n\n  return async function (value) {\n    let _value = value;\n\n    for (let i = functions.length - 1; i >= 0; i--) {\n      _value = functions[i].call(this, _value);\n\n      if (is.promise(_value)) {\n        _value = await _value;\n      }\n    }\n\n    return _value;\n  };\n}\n"],"names":[],"mappings":";;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBO,SAAS,gBAAgB,WAAW;AACzC,MAAI,UAAU,WAAW,GAAG;AAC1B,UAAM,IAAI,MAAM,6CAA6C;AAAA,EAC9D;AAED,SAAO,eAAgB,OAAO;AAC5B,QAAI,SAAS;AAEb,aAAS,IAAI,UAAU,SAAS,GAAG,KAAK,GAAG,KAAK;AAC9C,eAAS,UAAU,CAAC,EAAE,KAAK,MAAM,MAAM;AAEvC,UAAI,GAAG,QAAQ,MAAM,GAAG;AACtB,iBAAS,MAAM;AAAA,MAChB;AAAA,IACF;AAED,WAAO;AAAA,EACX;AACA;"}