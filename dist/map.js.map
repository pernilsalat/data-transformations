{"version":3,"file":"map.js","sources":["../src/internal/mappers.js","../src/map.js"],"sourcesContent":["import { xmap } from '#utils/internal/transducers.js';\n\nconst mapArray = (fn, m) => {\n  const len = m.length;\n  const result = new Array(len);\n\n  for (let idx = 0; idx < len; idx++) {\n    result[idx] = fn(m[idx], idx, m);\n  }\n\n  return result;\n};\n\nconst mapString = (fn, m) => {\n  const length = m.length;\n  let result = '';\n\n  for (let i = 0; i < length; i++) {\n    const char = m[i];\n    result += fn(char, i, m);\n  }\n\n  return result;\n};\n\nconst mapObj = (fn, m) => {\n  const obj = {};\n  const keys = Object.keys(m);\n  const length = keys.length;\n\n  for (let i = 0; i < length; i++) {\n    const k = keys[i];\n    const v = m[k];\n    obj[k] = fn(v, k, m);\n  }\n\n  return obj;\n};\n\nconst mapFunctor = (fn, m) => m.map(fn);\n\nconst mapIterator = (fn, it, m) => {\n  let step = it.next();\n  let result = [];\n  let idx = 0;\n  let value;\n\n  while (!step.done) {\n    value = fn(step.value, idx++, m);\n    result.push(value);\n\n    step = it.next();\n  }\n\n  return result;\n};\n\nconst mapIterable = (fn, m) => {\n  const it = m[Symbol.iterator].bind(m);\n  return mapIterator(fn, it(), m);\n};\n\nconst mapConstructableIterable = (fn, m) => {\n  const value = mapIterable(fn, m);\n  return new m.constructor(value);\n};\n\nexport const mapper = {\n  '[object Array]': mapArray,\n  '[object Method]': mapFunctor,\n  '[object Transducer]': xmap,\n  '[object Iterator]': mapIterable,\n  '[object Set]': mapConstructableIterable,\n  '[object Map]': mapConstructableIterable,\n  '[object Object]': mapObj,\n  '[object String]': mapString,\n  '[object GeneratorFunction]': (fn, m) => mapIterator(fn, m(), m),\n  '[object Generator]': (fn, m) => mapIterator(fn, m, m),\n};\n","import { get } from '#utils/internal/get.js';\nimport { mapper } from '#utils/internal/mappers.js';\n\n/**\n * **[Curried function]**\n *\n *\n * Returns a new Iterable, constructed by applying the supplied function to every element of the\n * supplied list.\n *\n * When mapping an object, the function mapper accepts **(value, key, object)**\n * In any other case, the mapper function accepts **(value, index, collection)**. The value comes from\n * the iterator of the collection.\n *\n * Note: `map` does not skip deleted or unassigned indices (sparse arrays), unlike the\n * native `Array.prototype.map` method. For more details on this behavior, see:\n * [Array.prototype.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map#Description)\n *\n * Acts as a transducer if a transformer is given as second parameter.\n * @see transduce\n *\n * @func\n * @category List\n * @param {Function} fn The function to be called on every element of the input `Iterable`.\n * @param {Collection} [collection] The Iterable to be iterated over.\n * @return {Collection|Function} The new Iterable or curried function.\n * @example\n *\n * const toUpperCase = (x) => x.toUpperCase();\n * const double = (x) => x * 2;\n * const doubleValue = ([k, v]) => [k, v * 2];\n *\n * map(toUpperCase, 'aeiou'); //=> 'AEIOU'\n * map(double, [1, 2, 3]); //=> [2, 4, 6]\n * map(double, Set[1, 2, 3]); //=> Set[2, 4, 6]\n * map(double, function* () { yield* [1, 2, 3]}); //=> [2, 4, 6]\n * map(double, { a: 1, b: 2 }); //=> { a: 2, b: 4 }\n * map(doubleValue, Map{ a: 1, b: 2 }); //=> Map{ a: 2, b: 4 }\n *\n * @preserve true\n */\nexport function map(fn, collection) {\n  if (arguments.length === 1) return (_collection) => map(fn, _collection);\n\n  if (typeof fn !== 'function') {\n    throw new TypeError(\n      `map: Please provide a Function for the first argument`,\n    );\n  }\n\n  const type = get.type(collection, 'map');\n\n  if (type in mapper) {\n    return mapper[type](fn, collection);\n  }\n\n  throw new TypeError('map: collection type not supported: ' + type);\n}\n"],"names":[],"mappings":";;AAEA,MAAM,WAAW,CAAC,IAAI,MAAM;AAC1B,QAAM,MAAM,EAAE;AACd,QAAM,SAAS,IAAI,MAAM,GAAG;AAE5B,WAAS,MAAM,GAAG,MAAM,KAAK,OAAO;AAClC,WAAO,GAAG,IAAI,GAAG,EAAE,GAAG,GAAG,KAAK,CAAC;AAAA,EAChC;AAED,SAAO;AACT;AAEA,MAAM,YAAY,CAAC,IAAI,MAAM;AAC3B,QAAM,SAAS,EAAE;AACjB,MAAI,SAAS;AAEb,WAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC/B,UAAM,OAAO,EAAE,CAAC;AAChB,cAAU,GAAG,MAAM,GAAG,CAAC;AAAA,EACxB;AAED,SAAO;AACT;AAEA,MAAM,SAAS,CAAC,IAAI,MAAM;AACxB,QAAM,MAAM,CAAA;AACZ,QAAM,OAAO,OAAO,KAAK,CAAC;AAC1B,QAAM,SAAS,KAAK;AAEpB,WAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC/B,UAAM,IAAI,KAAK,CAAC;AAChB,UAAM,IAAI,EAAE,CAAC;AACb,QAAI,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC;AAAA,EACpB;AAED,SAAO;AACT;AAEA,MAAM,aAAa,CAAC,IAAI,MAAM,EAAE,IAAI,EAAE;AAEtC,MAAM,cAAc,CAAC,IAAI,IAAI,MAAM;AACjC,MAAI,OAAO,GAAG;AACd,MAAI,SAAS,CAAA;AACb,MAAI,MAAM;AACV,MAAI;AAEJ,SAAO,CAAC,KAAK,MAAM;AACjB,YAAQ,GAAG,KAAK,OAAO,OAAO,CAAC;AAC/B,WAAO,KAAK,KAAK;AAEjB,WAAO,GAAG;EACX;AAED,SAAO;AACT;AAEA,MAAM,cAAc,CAAC,IAAI,MAAM;AAC7B,QAAM,KAAK,EAAE,OAAO,QAAQ,EAAE,KAAK,CAAC;AACpC,SAAO,YAAY,IAAI,GAAI,GAAE,CAAC;AAChC;AAEA,MAAM,2BAA2B,CAAC,IAAI,MAAM;AAC1C,QAAM,QAAQ,YAAY,IAAI,CAAC;AAC/B,SAAO,IAAI,EAAE,YAAY,KAAK;AAChC;AAEO,MAAM,SAAS;AAAA,EACpB,kBAAkB;AAAA,EAClB,mBAAmB;AAAA,EACnB,uBAAuB;AAAA,EACvB,qBAAqB;AAAA,EACrB,gBAAgB;AAAA,EAChB,gBAAgB;AAAA,EAChB,mBAAmB;AAAA,EACnB,mBAAmB;AAAA,EACnB,8BAA8B,CAAC,IAAI,MAAM,YAAY,IAAI,EAAG,GAAE,CAAC;AAAA,EAC/D,sBAAsB,CAAC,IAAI,MAAM,YAAY,IAAI,GAAG,CAAC;AACvD;AC3EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsCO,SAAS,IAAI,IAAI,YAAY;AAClC,MAAI,UAAU,WAAW;AAAG,WAAO,CAAC,gBAAgB,IAAI,IAAI,WAAW;AAEvE,MAAI,OAAO,OAAO,YAAY;AAC5B,UAAM,IAAI;AAAA,MACR;AAAA,IACN;AAAA,EACG;AAED,QAAM,OAAO,IAAI,KAAK,YAAY,KAAK;AAEvC,MAAI,QAAQ,QAAQ;AAClB,WAAO,OAAO,IAAI,EAAE,IAAI,UAAU;AAAA,EACnC;AAED,QAAM,IAAI,UAAU,yCAAyC,IAAI;AACnE;"}