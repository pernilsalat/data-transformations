{"version":3,"file":"get-3e246b66.js","sources":["../src/internal/get.js"],"sourcesContent":["export const get = {\n  // generator: (x) => {\n  //   if (is.iterator(x)) {\n  //     return function* () {\n  //       let i = 0;\n  //       for (const v of x) {\n  //         yield [v, i++, x];\n  //       }\n  //     };\n  //   }\n  //\n  //   if (is.object(x)) {\n  //     return function* () {\n  //       let i = 0;\n  //       for (const v of Object.entries(x)) {\n  //         yield [v, i++, x];\n  //       }\n  //     };\n  //   }\n  //\n  //   throw new TypeError(`instance ${x} is not iterable`);\n  // },\n  type(x, method) {\n    if (Array.isArray(x)) return '[object Array]';\n\n    let type = Object.prototype.toString.call(x);\n\n    if (type === '[object Object]' || type === '[object Function]') {\n      if (typeof x['@@transducer/step'] === 'function') {\n        type = '[object Transducer]';\n      } else if (typeof x[method] === 'function') {\n        type = '[object Method]';\n      } else if (typeof x[Symbol.iterator] === 'function') {\n        type = '[object Iterator]';\n      }\n    }\n\n    return type;\n  },\n};\n"],"names":[],"mappings":"AAAY,MAAC,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBjB,KAAK,GAAG,QAAQ;AACd,QAAI,MAAM,QAAQ,CAAC;AAAG,aAAO;AAE7B,QAAI,OAAO,OAAO,UAAU,SAAS,KAAK,CAAC;AAE3C,QAAI,SAAS,qBAAqB,SAAS,qBAAqB;AAC9D,UAAI,OAAO,EAAE,mBAAmB,MAAM,YAAY;AAChD,eAAO;AAAA,MACR,WAAU,OAAO,EAAE,MAAM,MAAM,YAAY;AAC1C,eAAO;AAAA,MACR,WAAU,OAAO,EAAE,OAAO,QAAQ,MAAM,YAAY;AACnD,eAAO;AAAA,MACR;AAAA,IACF;AAED,WAAO;AAAA,EACR;AACH;"}