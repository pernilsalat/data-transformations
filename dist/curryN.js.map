{"version":3,"file":"curryN.js","sources":["../src/curryN.js"],"sourcesContent":["/**\n * Returns a curried equivalent of the provided function, with the\n * specified arity. The curried function has two unusual capabilities.\n * First, its arguments needn't be provided one at a time. If `g` is\n * `curryN(3, f)`, the following are equivalent:\n *\n * - `g(1)(2)(3)`\n * - `g(1)(2, 3)`\n * - `g(1, 2)(3)`\n * - `g(1, 2, 3)`\n *\n * @func\n * @category Function\n * @param {Number} arity The arity for the returned function.\n * @param {Function} fn The function to curry.\n * @param {...*} initialArgs The function initial arguments.\n * @return {Function} A new, curried function.\n * @see curry\n * @example\n *\n * var addFourNumbers = function(a, b, c, d = 0) {\n *   return a + b + c + d;\n * };\n *\n * var curriedAddFourNumbers = curryN(3, addFourNumbers);\n * var f = curriedAddFourNumbers(1, 2);\n * f(3); //=> 6\n *\n * @preserve true\n */\nexport function curryN(arity, fn, ...initialArgs) {\n  return function curried(...args) {\n    const totalArgs = [...initialArgs, ...args];\n    if (totalArgs.length >= arity) {\n      return fn.call(this, ...totalArgs);\n    }\n    return curryN.call(this, arity, fn, ...totalArgs);\n  };\n}\n"],"names":[],"mappings":"AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8BO,SAAS,OAAO,OAAO,OAAO,aAAa;AAChD,SAAO,SAAS,WAAW,MAAM;AAC/B,UAAM,YAAY,CAAC,GAAG,aAAa,GAAG,IAAI;AAC1C,QAAI,UAAU,UAAU,OAAO;AAC7B,aAAO,GAAG,KAAK,MAAM,GAAG,SAAS;AAAA,IAClC;AACD,WAAO,OAAO,KAAK,MAAM,OAAO,IAAI,GAAG,SAAS;AAAA,EACpD;AACA;"}