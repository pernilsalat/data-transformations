{"version":3,"file":"compose.js","sources":["../src/compose.js"],"sourcesContent":["/**\n * Performs right-to-left function composition. The rightmost function may have\n * any arity; the remaining functions must be unary.\n * @func\n * @category Function\n * @param {...Function} functions\n * @return {Function} a function that represents the composition of the arguments\n * @see pipe\n * @example\n * const inc = x => x + 1:\n * const negate = x => -x;\n *\n * var f = compose(inc, negate, Math.pow);\n * f(3, 4); // -(3^4) + 1\n *\n * @preserve true\n */\nexport function compose(...functions) {\n  if (arguments.length === 0) {\n    throw new Error('compose requires at least one argument');\n  }\n\n  return function (x) {\n    return functions.reduceRight((y, f) => f.call(this, y), x);\n  };\n}\n"],"names":[],"mappings":"AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBO,SAAS,WAAW,WAAW;AACpC,MAAI,UAAU,WAAW,GAAG;AAC1B,UAAM,IAAI,MAAM,wCAAwC;AAAA,EACzD;AAED,SAAO,SAAU,GAAG;AAClB,WAAO,UAAU,YAAY,CAAC,GAAG,MAAM,EAAE,KAAK,MAAM,CAAC,GAAG,CAAC;AAAA,EAC7D;AACA;"}