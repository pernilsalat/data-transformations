{"version":3,"file":"curry.js","sources":["../src/curry.js"],"sourcesContent":["/**\n * Returns a curried equivalent of the provided function. The curried\n * function has two unusual capabilities. First, its arguments needn't\n * be provided one at a time. If `f` is a ternary function and `g` is\n * `curry(f)`, the following are equivalent:\n * - `g(1)(2)(3)`\n * - `g(1)(2, 3)`\n * - `g(1, 2)(3)`\n * - `g(1, 2, 3)`\n * @func\n * @category Function\n * @param {Function} fn The function to curry.\n * @param {...*} initialArgs The fn initial arguments.\n * @return {Function} A new, curried function.\n * @see curryN\n * @example\n * var addFourNumbers = function(a, b, c, d) {\n *   return a + b + c + d;\n * };\n * var curriedAddFourNumbers = curry(addFourNumbers);\n * var f = curriedAddFourNumbers(1, 2);\n * var g = f(3);\n * g(4); //=> 10\n *\n * @preserve true\n */\nexport function curry(fn, ...initialArgs) {\n  return function curried(...args) {\n    const totalArgs = [...initialArgs, ...args];\n    if (totalArgs.length >= fn.length) {\n      return fn.call(this, ...totalArgs);\n    }\n    return curry.call(this, fn, ...totalArgs);\n  };\n}\n"],"names":[],"mappings":"AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0BO,SAAS,MAAM,OAAO,aAAa;AACxC,SAAO,SAAS,WAAW,MAAM;AAC/B,UAAM,YAAY,CAAC,GAAG,aAAa,GAAG,IAAI;AAC1C,QAAI,UAAU,UAAU,GAAG,QAAQ;AACjC,aAAO,GAAG,KAAK,MAAM,GAAG,SAAS;AAAA,IAClC;AACD,WAAO,MAAM,KAAK,MAAM,IAAI,GAAG,SAAS;AAAA,EAC5C;AACA;"}