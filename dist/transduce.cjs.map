{"version":3,"file":"transduce.cjs","sources":["../src/transduce.js"],"sourcesContent":["import { curryN } from '#utils/curryN.js';\nimport { toTransducer } from '#utils/internal/toTransducer.js';\nimport { is } from '#utils/is.js';\nimport { reduce } from '#utils/reduce.js';\n\n/**\n * Initializes a transducer using supplied iterator function. Returns a single item by\n * iterating through the list, successively calling the transformed iterator function and\n * passing it an accumulator value and the current value from the array, and then passing\n * the result to the next call.\n *\n * The iterator function receives two values: *(acc, value)*. It will be wrapped as a\n * transformer to initialize the transducer. A transformer can be passed directly in place\n * of an iterator function.  In both cases, iteration may be stopped early with the\n * `reduced` function.\n *\n * A transducer is a function that accepts a transformer and returns a transformer and can\n * be composed directly.\n *\n * A transformer is an object that provides a 2-arity reducing iterator function, step,\n * 0-arity initial value function, init, and 1-arity result extraction function, result.\n * The step function is used as the iterator function in reduce. The result function is used\n * to convert the final accumulator into the return type and in most cases is R.identity.\n * The init function can be used to provide an initial accumulator, but is ignored by transduce.\n *\n * The iteration is performed with reduce after initializing the transducer.\n *\n * @func\n * @category List\n * @see reduce, reduced, into\n * @param {Function} transducer The transducer function. Receives a transformer and returns a transformer.\n * @param {Function} combine The iterator function. Receives two values, the accumulator and the\n *        current element from the array. Wrapped as transformer, if necessary, and used to\n *        initialize the transducer\n * @param {*} initial The initial accumulator value.\n * @param {Collection} collection The Iterable to iterate over.\n * @return {*} The final, accumulated value.\n * @example\n *\n * var t = transducers;\n * var inc = function(n) { return n+1; };\n * var isEven = function(n) { return n % 2 == 0; };\n * var apush = function(arr,x) { arr.push(x); return arr; };\n * var xf = compose(map(inc),filter(isEven));\n * transduce(xf, apush, [], [1,2,3,4]); // [2,4]\n *\n * @preserve true\n */\nexport const transduce = curryN(\n  3,\n  function transduce(transducer, combine, initial, collection) {\n    let _initial = initial;\n    let _collection = collection;\n    if (arguments.length === 3) {\n      if (is.function(combine)) {\n        throw new TypeError(\n          'If given only three arguments f must satisfy the ITransformer interface.',\n        );\n      }\n      _collection = initial;\n      _initial = combine['@@transducer/init']();\n    }\n\n    return reduce(transducer(toTransducer(combine)), _initial, _collection);\n  },\n);\n"],"names":["curryN","transduce","is","reduce","toTransducer"],"mappings":";;;;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2CY,MAAC,YAAYA,OAAM;AAAA,EAC7B;AAAA,EACA,SAASC,WAAU,YAAY,SAAS,SAAS,YAAY;AAC3D,QAAI,WAAW;AACf,QAAI,cAAc;AAClB,QAAI,UAAU,WAAW,GAAG;AAC1B,UAAIC,GAAE,GAAC,SAAS,OAAO,GAAG;AACxB,cAAM,IAAI;AAAA,UACR;AAAA,QACV;AAAA,MACO;AACD,oBAAc;AACd,iBAAW,QAAQ,mBAAmB;IACvC;AAED,WAAOC,OAAAA,OAAO,WAAWC,OAAY,aAAC,OAAO,CAAC,GAAG,UAAU,WAAW;AAAA,EACvE;AACH;;"}